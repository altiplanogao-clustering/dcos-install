---

# Uninstall old versions
- name: Install 
  package:
    name: '{{ item_l2 }}'
    state: present
  with_items: [tar, xz, unzip, curl, ipset]
  loop_control:
    loop_var: item_l2

- name: Check if .bk exist
  stat: path="/etc/sysconfig/selinux.bk"
  register: bkstat
- name: Backup /etc/sysconfig/selinux
  copy:
    remote_src: true
    src: /etc/sysconfig/selinux
    dest: /etc/sysconfig/selinux.bk
  when: ( not bkstat.stat.exists )
- name: Check selinux disabled
  shell: cat /etc/sysconfig/selinux  | grep ^SELINUX=disabled | wc -l
  register: selinux_disabled_res
  changed_when: False
- name: Check selinux disabled, set fact
  set_fact:
    selinux_disabled: "{{ (selinux_disabled_res.stdout == '1') | ternary(true, false) }}"
- name: Disable selinux
  block:
    - name: Update selinux configuration
      lineinfile:
        path: /etc/sysconfig/selinux
        regexp: '^SELINUX='
        line: 'SELINUX=disabled'

    - name: Get uptime
      shell: uptime
      register: utstat
    - name: Print uptime
      debug: msg='Uptime {{ utstat.stdout }}'

    - name: Reboot the server
      # command: shutdown -r 0 "Ansible updates triggered"
      shell: sleep 2 && shutdown -r 0 "Ansible updates triggered"
      async: 0
      poll: 0
      ignore_errors: true
      become: true
    - name: Wait for server come back
      local_action: wait_for host={{ ansible_ssh_host }} state=started port=22 delay=20 timeout=60 connect_timeout=15
      sudo: false

    - name: Get uptime
      shell: uptime
      register: utstat
    - name: Print uptime
      debug: msg='Uptime {{ utstat.stdout }}'
  when: not selinux_disabled

- name: Configure Deploy User
  block:
    - name: Configure Deploy User
      user:
        name: "{{ bootstrap.user }}"
        comment: "{{ bootstrap.user}}"
        group: "{{ bootstrap.group }}"
        shell: /bin/bash
    - name: Configure user password
      raw: echo "{{ bootstrap.user}}:{{ bootstrap.password }}"  | chpasswd
    - name: Make .ssh dir
      file:
        path: "/home/{{ bootstrap.user }}/.ssh"
        state: directory
        owner: "{{ bootstrap.user }}"
        group: "{{ bootstrap.group }}"
    - name: Make authorized_keys file
      file:
        path: "/home/{{ bootstrap.user }}/.ssh/authorized_keys"
        state: touch
        owner: "{{ bootstrap.user }}"
        group: "{{ bootstrap.group }}"
    - name: Authenticate to bootstrap, evaluate
      slurp:
        src: "/home/{{ bootstrap.user }}/.ssh/id_rsa.pub"
      register: id_rsa_pub
      delegate_to: boot
      become: true
      run_once: true
    - debug:
        msg: "{{ id_rsa_pub['content'] | b64decode }}"
    # - name: Authenticate to bootstrap
    #   lineinfile:
    #     path: "/home/{{ bootstrap.user }}/.ssh/authorized_keys"
    #     line: "{{ id_rsa_pub['content'] | b64decode }}"
    - name: Authenticate to bootstrap
      blockinfile:
        path: "/home/{{ bootstrap.user }}/.ssh/authorized_keys"
        marker: "# {mark} TRUST BOOTSTRAP"
        block: |
          {{ id_rsa_pub['content'] | b64decode }}
  when: ( 'cluster' in group_names ) 
